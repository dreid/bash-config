_contains()
{
    local n=$#
    local value=${!n}
    for ((i=1;i < $#;i++)) {
        if [ "${!i}" == "${value}" ]; then
            return 0
        fi
    }
    return 1
}


_find_prev_command()
{
    local prev_command=""
    for word in ${COMP_WORDS[@]}; do
        _contains "${orders_with_args[@]}" "${word}"
        if [[ $? -eq 0 ]]; then
            prev_command="${word}"
        fi
    done
    echo "${prev_command}"
}

_fix_nodes()
{
    local running=$( (cd ./nodes; ls *.json) | sed -e "s/\.json$//")
    COMPREPLY=(
        $(compgen -S' ' -W "all" -- ${cur})
        $(compgen -W "${running}" -- ${cur}) )
}

_fix()
{
    local cur prev_command

    local orders_with_args=(
        node
        nodes_with_role
        recipe
        role
        list_nodes_with_recipe
        list_nodes_with_role
        plugin
    )

    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev_command=$( _find_prev_command )

    echo "${prev_command}"

    if [[ "${cur}" == ":" ]]; then
        # fix uses ':' to separate command from arguments.  We don't want it to
        # be cur because compgen won't do the right thing.
        cur=''
    fi

    case "${prev_command}" in
        node)
            _fix_nodes
            return 0
            ;;
        *)
        ;;
    esac

    local orders=$(fix -l | grep "^    " | cut -d' ' -f5)

    COMPREPLY=(
        $(compgen -W "${orders_with_args}" -S':' -- ${cur})
        $(compgen -S' ' -W "${orders}" -- ${cur}) )
    return 0
}

complete -o nospace -F _fix fix
